// Code generated by protoc-gen-jrpc-gateway. DO NOT EDIT.
// source: echo.proto

/*
Package proto is a reverse proxy.

It translates gRPC into JSON-RPC 2.0
*/
package proto

import (
	"context"
	"encoding/json"

	"google.golang.org/protobuf/encoding/protojson"
)

type EchoServiceJsonRpcService struct {
	client EchoServiceClient
}

func NewEchoServiceJsonRpcService(client EchoServiceClient) EchoServiceJsonRpcService {
	return EchoServiceJsonRpcService{
		client: client,
	}
}

func (s *EchoServiceJsonRpcService) Methods() map[string]func(ctx context.Context, message json.RawMessage) (any, error) {
	return map[string]func(ctx context.Context, params json.RawMessage) (any, error){

		"proto.echo_service.echo": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(EchoRequest)
			err := protojson.Unmarshal(data, req)
			if err != nil {
				return nil, err
			}
			return s.client.Echo(ctx, req)
		},
	}
}
